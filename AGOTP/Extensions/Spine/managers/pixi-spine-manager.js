var gdjs;(function(o){const s=new o.Logger("Spine Manager"),c=["spine"];class l{constructor(r,e){this._loadedSpines=new o.ResourceCache;this._resourceLoader=r,this._spineAtlasManager=e}getResourceKinds(){return c}async processResource(r){}async loadResource(r){const e=this._getSpineResource(r);if(!e)return s.error(`Unable to find spine json for resource ${r}.`);try{const n=this._resourceLoader.getRuntimeGame(),a=n.getEmbeddedResourcesNames(e.name);if(a.length!==1)return s.error(`Unable to find atlas metadata for resource spine json ${r}.`);const d=n.resolveEmbeddedResource(e.name,a[0]),u=await this._spineAtlasManager.getOrLoad(d),t=this._resourceLoader.getFullUrl(e.file);PIXI.Assets.setPreferences({preferWorkers:!1,crossOrigin:this._resourceLoader.checkIfCredentialsRequired(t)?"use-credentials":"anonymous"}),PIXI.Assets.add(e.name,t,{spineAtlas:u});const i=await PIXI.Assets.load(e.name);i.spineData?this._loadedSpines.set(e,i.spineData):s.error(`Loader cannot process spine resource ${e.name} correctly.`)}catch(n){s.error(`Error while preloading spine resource ${e.name}: ${n}`)}}getSpine(r){return this._loadedSpines.getFromName(r)}isSpineLoaded(r){return!!this._loadedSpines.getFromName(r)}_getSpineResource(r){const e=this._resourceLoader.getResource(r);return e&&this.getResourceKinds().includes(e.kind)?e:null}}o.SpineManager=l})(gdjs||(gdjs={}));
//# sourceMappingURL=pixi-spine-manager.js.map
